<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<!-- 可以指定多个generatorConfiguration标签，以从多个数据库，或以多种不同的参数，生成MyBatis文件 -->
<generatorConfiguration>

    <!-- 引入 properties 配置文件 -->
    <properties resource="properties/mbg.properties"/>
    <!-- 数据库链接驱动包（使用在插件中直接引入方式）指定外部classPath，这里是MySQL数据库驱动地址 -->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <!-- 主要配置内容，指定生成哪些MyBais文件，targetRunTime指定生成代码的运行目标，defaultModelType指定一张数据表生成一个领域模型类 -->
    <!-- targetRuntime="MyBatis3Simple"：不生成Example.java文件，进而不生成XXXByExample方法，仅提供最基础的CRUD方法 -->
    <!-- tragetRuntime="MyBatis3"：生成Example.java文件和XXXByExample方法，除了最基础的CRUD方法外，提供自定义动态Where子句功能 -->
    <context id="MySQLTables" targetRuntime="MyBatis3" defaultModelType="flat">

        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
                一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖 -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- 为生成的Java模型类添加序列化接口 -->
        <!-- <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/> -->
        <!-- 使用自己扩展的序列化插件，对 Example 也实现序列化接口 -->
        <plugin type="com.zhen.plugins.mybatis.generator.SerializablePlugin"/>
        <!-- 为生成的Java模型创建一个toString方法 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!--生成mapper.xml时覆盖原文件-->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin" />
        <!-- 这里的type里写的是你的实现类的类全路径 -->
        <commentGenerator type="com.zhen.plugins.mybatis.generator.MyCommentGenerator">
            <!-- true:不生成注释，false:生成注释 -->
            <!--<property name="suppressAllComments" value="true"/>-->
            <!-- 在注释中，true:不显示时间戳 ,false:显示时间戳 -->
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!-- 1.指定JDBC数据库连接信息 -->
        <jdbcConnection driverClass="${jdbc_driver}"
                        connectionURL="${jdbc_url}"
                        userId="${jdbc_user}"
                        password="${jdbc_password}">
            <!-- 针对oracle数据库 -->
            <!--<property name="remarksReporting" value="true"/>-->
            <!-- 针对mysql数据库 -->
            <property name="useInformationSchema" value="true"/>
            <!-- 配置文件使用通配符 % 时，会生成关于 mysql 信息表的 pojo和mapper 解决方式-->
            <property name="nullCatalogMeansCurrent" value="true"/>

        </jdbcConnection>

        <!-- 类型解析器 自定义的-->
        <javaTypeResolver type="com.zhen.plugins.mybatis.generator.MyJavaTypeResolver">
            <!-- false: 默认值，根据JDBC中的DECIMAL/NUMBERIC类型的具体定义，分别表达为java.math.BigDecimal, java.lang.Long/Integer/Short -->
            <!-- true: 始终使用java.math.BigDecimal表达JDBC中的DECIMAL/NUMBERIC类型 -->
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!-- 2. 指定采用何种方式，生成何种对象 -->
        <!-- 生成领域模型（实体类）和查询对象，	在tragetProject目录下的targetPackage(demo.model)包中生成与数据表同名的领域模型 (Xxx.java) -->
        <javaModelGenerator targetPackage="${model.target.package}" targetProject="${target.project}">
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <!-- 从数据库返回的值被清理前后的空格 -->
            <property name="trimStrings" value="true"/>
            <!-- 不使用setProperty方法，而是使用构造函数为每个字段赋值，推荐不设置此属性 -->
            <!-- <property name="immutable" value="true" /> -->
        </javaModelGenerator>

        <!-- 生成 MyBatis的SQL映射文件，XxxMapper.xml -->
        <sqlMapGenerator targetPackage="${mapper.target.package}" targetProject="../zhen-service/${target.resources}">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--生成MyBatis的DAO接口，XxxMapper.java -->
        <!-- type表示javaClient的类型，支持XMLMAPPER:SQL映射文件+接口，ANNOTATEDMAPPER：SQLBuilder+注解+接口，MIXEDMAPPER：混合形式 -->
        <javaClientGenerator targetPackage="${dao.target.package}" targetProject="../zhen-service/${target.project}" type="XMLMAPPER">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!-- 3. 指定为哪些数据表生成MyBatis文件 -->
        <!--指定数据库要逆向工程生成的表-->
        <!--可以生成很多表，生成在本工程结构里面-->
        <!--设置Example为true的话，就会生成Example文件，比较杂乱，不想生成这些内容的话，直接选择false即可
        tableName:指定了表名
        domainObjectName:指定了实体类的名称,可以去掉domainObjectName="False_comment"
        -->
        <table tableName="s_sign_info"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">

            <!--<columnOverride column="REQ_JSON" javaType="java.lang.String" jdbcType="VARCHAR"/>-->
            <!--<columnOverride column="RES_JSON" javaType="java.lang.String" jdbcType="VARCHAR"/>-->

            <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，
            比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate
            再比如：数据库里的原本列名是：`is_show_name`（都是小写），
            如果true就会生成：is_show_name（还是数据库实际的字段名字,原始名字）；生成的setter/getter为：getIs_show_name()和setIs_show_name()(只是第一个字母大写)
            如果false就会生成：isShowName（去掉了下划线，变成了驼峰命名方法）；生成的setter/getter为：getIsShowName() 和setIsShowName() (只是第一个字母大写)
            注意：如果明确的使用columnOverride元素指定了字段对应的实体的属性名,那么useActualColumnNames会被忽略。
            -->
            <!-- <property name="useActualColumnNames" value="false"/>-->
        </table>
    </context>
</generatorConfiguration>
